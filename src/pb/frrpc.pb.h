// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frrpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frrpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frrpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frrpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_frrpc_2eproto();
namespace frrpc {
class RpcMeta;
class RpcMetaDefaultTypeInternal;
extern RpcMetaDefaultTypeInternal _RpcMeta_default_instance_;
class RpcRequestMeta;
class RpcRequestMetaDefaultTypeInternal;
extern RpcRequestMetaDefaultTypeInternal _RpcRequestMeta_default_instance_;
class RpcResponseMeta;
class RpcResponseMetaDefaultTypeInternal;
extern RpcResponseMetaDefaultTypeInternal _RpcResponseMeta_default_instance_;
}  // namespace frrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::frrpc::RpcMeta* Arena::CreateMaybeMessage<::frrpc::RpcMeta>(Arena*);
template<> ::frrpc::RpcRequestMeta* Arena::CreateMaybeMessage<::frrpc::RpcRequestMeta>(Arena*);
template<> ::frrpc::RpcResponseMeta* Arena::CreateMaybeMessage<::frrpc::RpcResponseMeta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frrpc {

enum eCompressType {
  eCompressType_Not = 0,
  eCompressType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eCompressType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eCompressType_IsValid(int value);
constexpr eCompressType eCompressType_MIN = eCompressType_Not;
constexpr eCompressType eCompressType_MAX = eCompressType_Not;
constexpr int eCompressType_ARRAYSIZE = eCompressType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eCompressType_descriptor();
inline const std::string& eCompressType_Name(eCompressType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eCompressType_descriptor(), value);
}
inline bool eCompressType_Parse(
    const std::string& name, eCompressType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eCompressType>(
    eCompressType_descriptor(), name, value);
}
enum eRpcEvent {
  eRpcEvent_Tmp = 0,
  eRpcEvent_Method = 1,
  eRpcEvent_Connection = 2,
  eRpcEvent_Disconnection = 3,
  eRpcEvent_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eRpcEvent_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eRpcEvent_IsValid(int value);
constexpr eRpcEvent eRpcEvent_MIN = eRpcEvent_Tmp;
constexpr eRpcEvent eRpcEvent_MAX = eRpcEvent_Disconnection;
constexpr int eRpcEvent_ARRAYSIZE = eRpcEvent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eRpcEvent_descriptor();
inline const std::string& eRpcEvent_Name(eRpcEvent value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eRpcEvent_descriptor(), value);
}
inline bool eRpcEvent_Parse(
    const std::string& name, eRpcEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eRpcEvent>(
    eRpcEvent_descriptor(), name, value);
}
// ===================================================================

class RpcRequestMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frrpc.RpcRequestMeta) */ {
 public:
  RpcRequestMeta();
  virtual ~RpcRequestMeta();

  RpcRequestMeta(const RpcRequestMeta& from);
  RpcRequestMeta(RpcRequestMeta&& from) noexcept
    : RpcRequestMeta() {
    *this = ::std::move(from);
  }

  inline RpcRequestMeta& operator=(const RpcRequestMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcRequestMeta& operator=(RpcRequestMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RpcRequestMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcRequestMeta* internal_default_instance() {
    return reinterpret_cast<const RpcRequestMeta*>(
               &_RpcRequestMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RpcRequestMeta* other);
  friend void swap(RpcRequestMeta& a, RpcRequestMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcRequestMeta* New() const final {
    return CreateMaybeMessage<RpcRequestMeta>(nullptr);
  }

  RpcRequestMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcRequestMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcRequestMeta& from);
  void MergeFrom(const RpcRequestMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcRequestMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frrpc.RpcRequestMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:frrpc.RpcRequestMeta)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frrpc_2eproto;
};
// -------------------------------------------------------------------

class RpcResponseMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frrpc.RpcResponseMeta) */ {
 public:
  RpcResponseMeta();
  virtual ~RpcResponseMeta();

  RpcResponseMeta(const RpcResponseMeta& from);
  RpcResponseMeta(RpcResponseMeta&& from) noexcept
    : RpcResponseMeta() {
    *this = ::std::move(from);
  }

  inline RpcResponseMeta& operator=(const RpcResponseMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcResponseMeta& operator=(RpcResponseMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RpcResponseMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcResponseMeta* internal_default_instance() {
    return reinterpret_cast<const RpcResponseMeta*>(
               &_RpcResponseMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RpcResponseMeta* other);
  friend void swap(RpcResponseMeta& a, RpcResponseMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcResponseMeta* New() const final {
    return CreateMaybeMessage<RpcResponseMeta>(nullptr);
  }

  RpcResponseMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcResponseMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcResponseMeta& from);
  void MergeFrom(const RpcResponseMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcResponseMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frrpc.RpcResponseMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);

  // bool failed = 2;
  void clear_failed();
  static const int kFailedFieldNumber = 2;
  bool failed() const;
  void set_failed(bool value);

  // @@protoc_insertion_point(class_scope:frrpc.RpcResponseMeta)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  bool failed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frrpc_2eproto;
};
// -------------------------------------------------------------------

class RpcMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frrpc.RpcMeta) */ {
 public:
  RpcMeta();
  virtual ~RpcMeta();

  RpcMeta(const RpcMeta& from);
  RpcMeta(RpcMeta&& from) noexcept
    : RpcMeta() {
    *this = ::std::move(from);
  }

  inline RpcMeta& operator=(const RpcMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMeta& operator=(RpcMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RpcMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcMeta* internal_default_instance() {
    return reinterpret_cast<const RpcMeta*>(
               &_RpcMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RpcMeta* other);
  friend void swap(RpcMeta& a, RpcMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcMeta* New() const final {
    return CreateMaybeMessage<RpcMeta>(nullptr);
  }

  RpcMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcMeta& from);
  void MergeFrom(const RpcMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frrpc.RpcMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);

  // .frrpc.RpcRequestMeta rpc_request_meta = 3;
  bool has_rpc_request_meta() const;
  void clear_rpc_request_meta();
  static const int kRpcRequestMetaFieldNumber = 3;
  const ::frrpc::RpcRequestMeta& rpc_request_meta() const;
  ::frrpc::RpcRequestMeta* release_rpc_request_meta();
  ::frrpc::RpcRequestMeta* mutable_rpc_request_meta();
  void set_allocated_rpc_request_meta(::frrpc::RpcRequestMeta* rpc_request_meta);

  // .frrpc.RpcResponseMeta rpc_response_meta = 4;
  bool has_rpc_response_meta() const;
  void clear_rpc_response_meta();
  static const int kRpcResponseMetaFieldNumber = 4;
  const ::frrpc::RpcResponseMeta& rpc_response_meta() const;
  ::frrpc::RpcResponseMeta* release_rpc_response_meta();
  ::frrpc::RpcResponseMeta* mutable_rpc_response_meta();
  void set_allocated_rpc_response_meta(::frrpc::RpcResponseMeta* rpc_response_meta);

  // int32 method_index = 2;
  void clear_method_index();
  static const int kMethodIndexFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 method_index() const;
  void set_method_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .frrpc.eCompressType compress_type = 5;
  void clear_compress_type();
  static const int kCompressTypeFieldNumber = 5;
  ::frrpc::eCompressType compress_type() const;
  void set_compress_type(::frrpc::eCompressType value);

  // @@protoc_insertion_point(class_scope:frrpc.RpcMeta)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::frrpc::RpcRequestMeta* rpc_request_meta_;
  ::frrpc::RpcResponseMeta* rpc_response_meta_;
  ::PROTOBUF_NAMESPACE_ID::int32 method_index_;
  int compress_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_frrpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcRequestMeta

// uint64 request_id = 1;
inline void RpcRequestMeta::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RpcRequestMeta::request_id() const {
  // @@protoc_insertion_point(field_get:frrpc.RpcRequestMeta.request_id)
  return request_id_;
}
inline void RpcRequestMeta::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:frrpc.RpcRequestMeta.request_id)
}

// -------------------------------------------------------------------

// RpcResponseMeta

// string error = 1;
inline void RpcResponseMeta::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RpcResponseMeta::error() const {
  // @@protoc_insertion_point(field_get:frrpc.RpcResponseMeta.error)
  return error_.GetNoArena();
}
inline void RpcResponseMeta::set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frrpc.RpcResponseMeta.error)
}
inline void RpcResponseMeta::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frrpc.RpcResponseMeta.error)
}
inline void RpcResponseMeta::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frrpc.RpcResponseMeta.error)
}
inline void RpcResponseMeta::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frrpc.RpcResponseMeta.error)
}
inline std::string* RpcResponseMeta::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:frrpc.RpcResponseMeta.error)
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RpcResponseMeta::release_error() {
  // @@protoc_insertion_point(field_release:frrpc.RpcResponseMeta.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RpcResponseMeta::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:frrpc.RpcResponseMeta.error)
}

// bool failed = 2;
inline void RpcResponseMeta::clear_failed() {
  failed_ = false;
}
inline bool RpcResponseMeta::failed() const {
  // @@protoc_insertion_point(field_get:frrpc.RpcResponseMeta.failed)
  return failed_;
}
inline void RpcResponseMeta::set_failed(bool value) {
  
  failed_ = value;
  // @@protoc_insertion_point(field_set:frrpc.RpcResponseMeta.failed)
}

// -------------------------------------------------------------------

// RpcMeta

// string service_name = 1;
inline void RpcMeta::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RpcMeta::service_name() const {
  // @@protoc_insertion_point(field_get:frrpc.RpcMeta.service_name)
  return service_name_.GetNoArena();
}
inline void RpcMeta::set_service_name(const std::string& value) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frrpc.RpcMeta.service_name)
}
inline void RpcMeta::set_service_name(std::string&& value) {
  
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frrpc.RpcMeta.service_name)
}
inline void RpcMeta::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frrpc.RpcMeta.service_name)
}
inline void RpcMeta::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frrpc.RpcMeta.service_name)
}
inline std::string* RpcMeta::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:frrpc.RpcMeta.service_name)
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RpcMeta::release_service_name() {
  // @@protoc_insertion_point(field_release:frrpc.RpcMeta.service_name)
  
  return service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RpcMeta::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:frrpc.RpcMeta.service_name)
}

// int32 method_index = 2;
inline void RpcMeta::clear_method_index() {
  method_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcMeta::method_index() const {
  // @@protoc_insertion_point(field_get:frrpc.RpcMeta.method_index)
  return method_index_;
}
inline void RpcMeta::set_method_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  method_index_ = value;
  // @@protoc_insertion_point(field_set:frrpc.RpcMeta.method_index)
}

// .frrpc.RpcRequestMeta rpc_request_meta = 3;
inline bool RpcMeta::has_rpc_request_meta() const {
  return this != internal_default_instance() && rpc_request_meta_ != nullptr;
}
inline void RpcMeta::clear_rpc_request_meta() {
  if (GetArenaNoVirtual() == nullptr && rpc_request_meta_ != nullptr) {
    delete rpc_request_meta_;
  }
  rpc_request_meta_ = nullptr;
}
inline const ::frrpc::RpcRequestMeta& RpcMeta::rpc_request_meta() const {
  const ::frrpc::RpcRequestMeta* p = rpc_request_meta_;
  // @@protoc_insertion_point(field_get:frrpc.RpcMeta.rpc_request_meta)
  return p != nullptr ? *p : *reinterpret_cast<const ::frrpc::RpcRequestMeta*>(
      &::frrpc::_RpcRequestMeta_default_instance_);
}
inline ::frrpc::RpcRequestMeta* RpcMeta::release_rpc_request_meta() {
  // @@protoc_insertion_point(field_release:frrpc.RpcMeta.rpc_request_meta)
  
  ::frrpc::RpcRequestMeta* temp = rpc_request_meta_;
  rpc_request_meta_ = nullptr;
  return temp;
}
inline ::frrpc::RpcRequestMeta* RpcMeta::mutable_rpc_request_meta() {
  
  if (rpc_request_meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::frrpc::RpcRequestMeta>(GetArenaNoVirtual());
    rpc_request_meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frrpc.RpcMeta.rpc_request_meta)
  return rpc_request_meta_;
}
inline void RpcMeta::set_allocated_rpc_request_meta(::frrpc::RpcRequestMeta* rpc_request_meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rpc_request_meta_;
  }
  if (rpc_request_meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rpc_request_meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpc_request_meta, submessage_arena);
    }
    
  } else {
    
  }
  rpc_request_meta_ = rpc_request_meta;
  // @@protoc_insertion_point(field_set_allocated:frrpc.RpcMeta.rpc_request_meta)
}

// .frrpc.RpcResponseMeta rpc_response_meta = 4;
inline bool RpcMeta::has_rpc_response_meta() const {
  return this != internal_default_instance() && rpc_response_meta_ != nullptr;
}
inline void RpcMeta::clear_rpc_response_meta() {
  if (GetArenaNoVirtual() == nullptr && rpc_response_meta_ != nullptr) {
    delete rpc_response_meta_;
  }
  rpc_response_meta_ = nullptr;
}
inline const ::frrpc::RpcResponseMeta& RpcMeta::rpc_response_meta() const {
  const ::frrpc::RpcResponseMeta* p = rpc_response_meta_;
  // @@protoc_insertion_point(field_get:frrpc.RpcMeta.rpc_response_meta)
  return p != nullptr ? *p : *reinterpret_cast<const ::frrpc::RpcResponseMeta*>(
      &::frrpc::_RpcResponseMeta_default_instance_);
}
inline ::frrpc::RpcResponseMeta* RpcMeta::release_rpc_response_meta() {
  // @@protoc_insertion_point(field_release:frrpc.RpcMeta.rpc_response_meta)
  
  ::frrpc::RpcResponseMeta* temp = rpc_response_meta_;
  rpc_response_meta_ = nullptr;
  return temp;
}
inline ::frrpc::RpcResponseMeta* RpcMeta::mutable_rpc_response_meta() {
  
  if (rpc_response_meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::frrpc::RpcResponseMeta>(GetArenaNoVirtual());
    rpc_response_meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:frrpc.RpcMeta.rpc_response_meta)
  return rpc_response_meta_;
}
inline void RpcMeta::set_allocated_rpc_response_meta(::frrpc::RpcResponseMeta* rpc_response_meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rpc_response_meta_;
  }
  if (rpc_response_meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rpc_response_meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpc_response_meta, submessage_arena);
    }
    
  } else {
    
  }
  rpc_response_meta_ = rpc_response_meta;
  // @@protoc_insertion_point(field_set_allocated:frrpc.RpcMeta.rpc_response_meta)
}

// .frrpc.eCompressType compress_type = 5;
inline void RpcMeta::clear_compress_type() {
  compress_type_ = 0;
}
inline ::frrpc::eCompressType RpcMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:frrpc.RpcMeta.compress_type)
  return static_cast< ::frrpc::eCompressType >(compress_type_);
}
inline void RpcMeta::set_compress_type(::frrpc::eCompressType value) {
  
  compress_type_ = value;
  // @@protoc_insertion_point(field_set:frrpc.RpcMeta.compress_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace frrpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::frrpc::eCompressType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frrpc::eCompressType>() {
  return ::frrpc::eCompressType_descriptor();
}
template <> struct is_proto_enum< ::frrpc::eRpcEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frrpc::eRpcEvent>() {
  return ::frrpc::eRpcEvent_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frrpc_2eproto
