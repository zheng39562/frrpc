// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#include "net.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace frrpc {
namespace network {
class NetInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetInfo> _instance;
} _NetInfo_default_instance_;
}  // namespace network
}  // namespace frrpc
static void InitDefaultsNetInfo_net_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::frrpc::network::_NetInfo_default_instance_;
    new (ptr) ::frrpc::network::NetInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frrpc::network::NetInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetInfo_net_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetInfo_net_2eproto}, {}};

void InitDefaults_net_2eproto() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetInfo_net_2eproto.base);
}

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_net_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_net_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_net_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_net_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::frrpc::network::NetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::frrpc::network::NetInfo, net_type_),
  PROTOBUF_FIELD_OFFSET(::frrpc::network::NetInfo, net_binary_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::frrpc::network::NetInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::frrpc::network::_NetInfo_default_instance_),
};

static ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptorsTable assign_descriptors_table_net_2eproto = {
  {}, AddDescriptors_net_2eproto, "net.proto", schemas,
  file_default_instances, TableStruct_net_2eproto::offsets,
  file_level_metadata_net_2eproto, 1, file_level_enum_descriptors_net_2eproto, file_level_service_descriptors_net_2eproto,
};

const char descriptor_table_protodef_net_2eproto[] =
  "\n\tnet.proto\022\rfrrpc.network\"H\n\007NetInfo\022)\n"
  "\010net_type\030\001 \001(\0162\027.frrpc.network.eNetType"
  "\022\022\n\nnet_binary\030\002 \001(\014*\220\001\n\010eNetType\022\020\n\014eNe"
  "tType_Tmp\020\000\022\025\n\020eNetType_Special\020\357\001\022\026\n\021eN"
  "etType_RouteCmd\020\361\001\022\023\n\016eNetType_Heart\020\362\001\022"
  "\023\n\016eNetType_Route\020\363\001\022\031\n\024eNetType_RouteNo"
  "tify\020\364\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_net_2eproto = {
  false, InitDefaults_net_2eproto, 
  descriptor_table_protodef_net_2eproto,
  "net.proto", &assign_descriptors_table_net_2eproto, 255,
};

void AddDescriptors_net_2eproto() {
  static constexpr ::PROTOBUF_NAMESPACE_ID::internal::InitFunc deps[1] =
  {
  };
 ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_net_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_net_2eproto = []() { AddDescriptors_net_2eproto(); return true; }();
namespace frrpc {
namespace network {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eNetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&assign_descriptors_table_net_2eproto);
  return file_level_enum_descriptors_net_2eproto[0];
}
bool eNetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 239:
    case 241:
    case 242:
    case 243:
    case 244:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NetInfo::InitAsDefaultInstance() {
}
class NetInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetInfo::kNetTypeFieldNumber;
const int NetInfo::kNetBinaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetInfo::NetInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:frrpc.network.NetInfo)
}
NetInfo::NetInfo(const NetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.net_binary().size() > 0) {
    net_binary_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.net_binary_);
  }
  net_type_ = from.net_type_;
  // @@protoc_insertion_point(copy_constructor:frrpc.network.NetInfo)
}

void NetInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_NetInfo_net_2eproto.base);
  net_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  net_type_ = 0;
}

NetInfo::~NetInfo() {
  // @@protoc_insertion_point(destructor:frrpc.network.NetInfo)
  SharedDtor();
}

void NetInfo::SharedDtor() {
  net_binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetInfo& NetInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetInfo_net_2eproto.base);
  return *internal_default_instance();
}


void NetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:frrpc.network.NetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  net_binary_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  net_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .frrpc.network.eNetType net_type = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        set_net_type(static_cast<::frrpc::network::eNetType>(val));
        break;
      }
      // bytes net_binary = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_net_binary(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          return ptr;
        }
        ptr = UnknownFieldParse(tag,
          _internal_metadata_.mutable_unknown_fields(), ptr, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:frrpc.network.NetInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .frrpc.network.eNetType net_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_net_type(static_cast< ::frrpc::network::eNetType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes net_binary = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_net_binary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frrpc.network.NetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frrpc.network.NetInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frrpc.network.NetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .frrpc.network.eNetType net_type = 1;
  if (this->net_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->net_type(), output);
  }

  // bytes net_binary = 2;
  if (this->net_binary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->net_binary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:frrpc.network.NetInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* NetInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:frrpc.network.NetInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .frrpc.network.eNetType net_type = 1;
  if (this->net_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->net_type(), target);
  }

  // bytes net_binary = 2;
  if (this->net_binary().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->net_binary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frrpc.network.NetInfo)
  return target;
}

size_t NetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frrpc.network.NetInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes net_binary = 2;
  if (this->net_binary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->net_binary());
  }

  // .frrpc.network.eNetType net_type = 1;
  if (this->net_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->net_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frrpc.network.NetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NetInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frrpc.network.NetInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frrpc.network.NetInfo)
    MergeFrom(*source);
  }
}

void NetInfo::MergeFrom(const NetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frrpc.network.NetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.net_binary().size() > 0) {

    net_binary_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.net_binary_);
  }
  if (from.net_type() != 0) {
    set_net_type(from.net_type());
  }
}

void NetInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frrpc.network.NetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetInfo::CopyFrom(const NetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frrpc.network.NetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInfo::IsInitialized() const {
  return true;
}

void NetInfo::Swap(NetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetInfo::InternalSwap(NetInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  net_binary_.Swap(&other->net_binary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(net_type_, other->net_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInfo::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_net_2eproto);
  return ::file_level_metadata_net_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace network
}  // namespace frrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::frrpc::network::NetInfo* Arena::CreateMaybeMessage< ::frrpc::network::NetInfo >(Arena* arena) {
  return Arena::CreateInternal< ::frrpc::network::NetInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
