// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_net_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_net_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_net_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_net_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_net_2eproto();
namespace frrpc {
namespace network {
class NetInfo;
class NetInfoDefaultTypeInternal;
extern NetInfoDefaultTypeInternal _NetInfo_default_instance_;
}  // namespace network
}  // namespace frrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::frrpc::network::NetInfo* Arena::CreateMaybeMessage<::frrpc::network::NetInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace frrpc {
namespace network {

enum eNetType {
  eNetType_Tmp = 0,
  eNetType_Route = 1,
  eNetType_Special = 239,
  eNetType_RouteCmd = 241,
  eNetType_Heart = 242,
  eNetType_RouteNotify = 244,
  eNetType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eNetType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eNetType_IsValid(int value);
constexpr eNetType eNetType_MIN = eNetType_Tmp;
constexpr eNetType eNetType_MAX = eNetType_RouteNotify;
constexpr int eNetType_ARRAYSIZE = eNetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eNetType_descriptor();
inline const std::string& eNetType_Name(eNetType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eNetType_descriptor(), value);
}
inline bool eNetType_Parse(
    const std::string& name, eNetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eNetType>(
    eNetType_descriptor(), name, value);
}
// ===================================================================

class NetInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:frrpc.network.NetInfo) */ {
 public:
  NetInfo();
  virtual ~NetInfo();

  NetInfo(const NetInfo& from);
  NetInfo(NetInfo&& from) noexcept
    : NetInfo() {
    *this = ::std::move(from);
  }

  inline NetInfo& operator=(const NetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInfo& operator=(NetInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetInfo* internal_default_instance() {
    return reinterpret_cast<const NetInfo*>(
               &_NetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NetInfo* other);
  friend void swap(NetInfo& a, NetInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetInfo* New() const final {
    return CreateMaybeMessage<NetInfo>(nullptr);
  }

  NetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetInfo& from);
  void MergeFrom(const NetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "frrpc.network.NetInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes net_binary = 2;
  void clear_net_binary();
  static const int kNetBinaryFieldNumber = 2;
  const std::string& net_binary() const;
  void set_net_binary(const std::string& value);
  void set_net_binary(std::string&& value);
  void set_net_binary(const char* value);
  void set_net_binary(const void* value, size_t size);
  std::string* mutable_net_binary();
  std::string* release_net_binary();
  void set_allocated_net_binary(std::string* net_binary);

  // .frrpc.network.eNetType net_type = 1;
  void clear_net_type();
  static const int kNetTypeFieldNumber = 1;
  ::frrpc::network::eNetType net_type() const;
  void set_net_type(::frrpc::network::eNetType value);

  // @@protoc_insertion_point(class_scope:frrpc.network.NetInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr net_binary_;
  int net_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_net_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetInfo

// .frrpc.network.eNetType net_type = 1;
inline void NetInfo::clear_net_type() {
  net_type_ = 0;
}
inline ::frrpc::network::eNetType NetInfo::net_type() const {
  // @@protoc_insertion_point(field_get:frrpc.network.NetInfo.net_type)
  return static_cast< ::frrpc::network::eNetType >(net_type_);
}
inline void NetInfo::set_net_type(::frrpc::network::eNetType value) {
  
  net_type_ = value;
  // @@protoc_insertion_point(field_set:frrpc.network.NetInfo.net_type)
}

// bytes net_binary = 2;
inline void NetInfo::clear_net_binary() {
  net_binary_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetInfo::net_binary() const {
  // @@protoc_insertion_point(field_get:frrpc.network.NetInfo.net_binary)
  return net_binary_.GetNoArena();
}
inline void NetInfo::set_net_binary(const std::string& value) {
  
  net_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frrpc.network.NetInfo.net_binary)
}
inline void NetInfo::set_net_binary(std::string&& value) {
  
  net_binary_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frrpc.network.NetInfo.net_binary)
}
inline void NetInfo::set_net_binary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  net_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frrpc.network.NetInfo.net_binary)
}
inline void NetInfo::set_net_binary(const void* value, size_t size) {
  
  net_binary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frrpc.network.NetInfo.net_binary)
}
inline std::string* NetInfo::mutable_net_binary() {
  
  // @@protoc_insertion_point(field_mutable:frrpc.network.NetInfo.net_binary)
  return net_binary_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetInfo::release_net_binary() {
  // @@protoc_insertion_point(field_release:frrpc.network.NetInfo.net_binary)
  
  return net_binary_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetInfo::set_allocated_net_binary(std::string* net_binary) {
  if (net_binary != nullptr) {
    
  } else {
    
  }
  net_binary_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), net_binary);
  // @@protoc_insertion_point(field_set_allocated:frrpc.network.NetInfo.net_binary)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace network
}  // namespace frrpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::frrpc::network::eNetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frrpc::network::eNetType>() {
  return ::frrpc::network::eNetType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_net_2eproto
