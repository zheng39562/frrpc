// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frrpc.proto

#ifndef PROTOBUF_frrpc_2eproto__INCLUDED
#define PROTOBUF_frrpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_frrpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRpcRequestImpl();
void InitDefaultsRpcRequest();
void InitDefaultsRpcResponseImpl();
void InitDefaultsRpcResponse();
void InitDefaultsRpcMetaImpl();
void InitDefaultsRpcMeta();
inline void InitDefaults() {
  InitDefaultsRpcRequest();
  InitDefaultsRpcResponse();
  InitDefaultsRpcMeta();
}
}  // namespace protobuf_frrpc_2eproto
namespace frrpc {
class RpcMeta;
class RpcMetaDefaultTypeInternal;
extern RpcMetaDefaultTypeInternal _RpcMeta_default_instance_;
class RpcRequest;
class RpcRequestDefaultTypeInternal;
extern RpcRequestDefaultTypeInternal _RpcRequest_default_instance_;
class RpcResponse;
class RpcResponseDefaultTypeInternal;
extern RpcResponseDefaultTypeInternal _RpcResponse_default_instance_;
}  // namespace frrpc
namespace frrpc {

enum eCompressType {
  eCompressType_Invilad = 0,
  eCompressType_Not = 1,
  eCompressType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  eCompressType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool eCompressType_IsValid(int value);
const eCompressType eCompressType_MIN = eCompressType_Invilad;
const eCompressType eCompressType_MAX = eCompressType_Not;
const int eCompressType_ARRAYSIZE = eCompressType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eCompressType_descriptor();
inline const ::std::string& eCompressType_Name(eCompressType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eCompressType_descriptor(), value);
}
inline bool eCompressType_Parse(
    const ::std::string& name, eCompressType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eCompressType>(
    eCompressType_descriptor(), name, value);
}
// ===================================================================

class RpcRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frrpc.RpcRequest) */ {
 public:
  RpcRequest();
  virtual ~RpcRequest();

  RpcRequest(const RpcRequest& from);

  inline RpcRequest& operator=(const RpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcRequest(RpcRequest&& from) noexcept
    : RpcRequest() {
    *this = ::std::move(from);
  }

  inline RpcRequest& operator=(RpcRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcRequest* internal_default_instance() {
    return reinterpret_cast<const RpcRequest*>(
               &_RpcRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RpcRequest* other);
  friend void swap(RpcRequest& a, RpcRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RpcRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RpcRequest& from);
  void MergeFrom(const RpcRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RpcRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  ::google::protobuf::int64 request_id() const;
  void set_request_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:frrpc.RpcRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 request_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_frrpc_2eproto::TableStruct;
  friend void ::protobuf_frrpc_2eproto::InitDefaultsRpcRequestImpl();
};
// -------------------------------------------------------------------

class RpcResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frrpc.RpcResponse) */ {
 public:
  RpcResponse();
  virtual ~RpcResponse();

  RpcResponse(const RpcResponse& from);

  inline RpcResponse& operator=(const RpcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcResponse(RpcResponse&& from) noexcept
    : RpcResponse() {
    *this = ::std::move(from);
  }

  inline RpcResponse& operator=(RpcResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcResponse* internal_default_instance() {
    return reinterpret_cast<const RpcResponse*>(
               &_RpcResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RpcResponse* other);
  friend void swap(RpcResponse& a, RpcResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RpcResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RpcResponse& from);
  void MergeFrom(const RpcResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RpcResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 send_socket_list = 1;
  int send_socket_list_size() const;
  void clear_send_socket_list();
  static const int kSendSocketListFieldNumber = 1;
  ::google::protobuf::int32 send_socket_list(int index) const;
  void set_send_socket_list(int index, ::google::protobuf::int32 value);
  void add_send_socket_list(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      send_socket_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_send_socket_list();

  // @@protoc_insertion_point(class_scope:frrpc.RpcResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > send_socket_list_;
  mutable int _send_socket_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_frrpc_2eproto::TableStruct;
  friend void ::protobuf_frrpc_2eproto::InitDefaultsRpcResponseImpl();
};
// -------------------------------------------------------------------

class RpcMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frrpc.RpcMeta) */ {
 public:
  RpcMeta();
  virtual ~RpcMeta();

  RpcMeta(const RpcMeta& from);

  inline RpcMeta& operator=(const RpcMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcMeta(RpcMeta&& from) noexcept
    : RpcMeta() {
    *this = ::std::move(from);
  }

  inline RpcMeta& operator=(RpcMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcMeta* internal_default_instance() {
    return reinterpret_cast<const RpcMeta*>(
               &_RpcMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RpcMeta* other);
  friend void swap(RpcMeta& a, RpcMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  RpcMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RpcMeta& from);
  void MergeFrom(const RpcMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RpcMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 1;
  void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // bytes authentication_data = 5;
  void clear_authentication_data();
  static const int kAuthenticationDataFieldNumber = 5;
  const ::std::string& authentication_data() const;
  void set_authentication_data(const ::std::string& value);
  #if LANG_CXX11
  void set_authentication_data(::std::string&& value);
  #endif
  void set_authentication_data(const char* value);
  void set_authentication_data(const void* value, size_t size);
  ::std::string* mutable_authentication_data();
  ::std::string* release_authentication_data();
  void set_allocated_authentication_data(::std::string* authentication_data);

  // .frrpc.RpcRequest rpc_request = 6;
  bool has_rpc_request() const;
  void clear_rpc_request();
  static const int kRpcRequestFieldNumber = 6;
  const ::frrpc::RpcRequest& rpc_request() const;
  ::frrpc::RpcRequest* release_rpc_request();
  ::frrpc::RpcRequest* mutable_rpc_request();
  void set_allocated_rpc_request(::frrpc::RpcRequest* rpc_request);

  // .frrpc.RpcResponse rpc_response = 7;
  bool has_rpc_response() const;
  void clear_rpc_response();
  static const int kRpcResponseFieldNumber = 7;
  const ::frrpc::RpcResponse& rpc_response() const;
  ::frrpc::RpcResponse* release_rpc_response();
  ::frrpc::RpcResponse* mutable_rpc_response();
  void set_allocated_rpc_response(::frrpc::RpcResponse* rpc_response);

  // int64 body_size = 3;
  void clear_body_size();
  static const int kBodySizeFieldNumber = 3;
  ::google::protobuf::int64 body_size() const;
  void set_body_size(::google::protobuf::int64 value);

  // int32 method_index = 2;
  void clear_method_index();
  static const int kMethodIndexFieldNumber = 2;
  ::google::protobuf::int32 method_index() const;
  void set_method_index(::google::protobuf::int32 value);

  // .frrpc.eCompressType compress_type = 4;
  void clear_compress_type();
  static const int kCompressTypeFieldNumber = 4;
  ::frrpc::eCompressType compress_type() const;
  void set_compress_type(::frrpc::eCompressType value);

  // @@protoc_insertion_point(class_scope:frrpc.RpcMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr authentication_data_;
  ::frrpc::RpcRequest* rpc_request_;
  ::frrpc::RpcResponse* rpc_response_;
  ::google::protobuf::int64 body_size_;
  ::google::protobuf::int32 method_index_;
  int compress_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_frrpc_2eproto::TableStruct;
  friend void ::protobuf_frrpc_2eproto::InitDefaultsRpcMetaImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcRequest

// int64 request_id = 1;
inline void RpcRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RpcRequest::request_id() const {
  // @@protoc_insertion_point(field_get:frrpc.RpcRequest.request_id)
  return request_id_;
}
inline void RpcRequest::set_request_id(::google::protobuf::int64 value) {
  
  request_id_ = value;
  // @@protoc_insertion_point(field_set:frrpc.RpcRequest.request_id)
}

// -------------------------------------------------------------------

// RpcResponse

// repeated int32 send_socket_list = 1;
inline int RpcResponse::send_socket_list_size() const {
  return send_socket_list_.size();
}
inline void RpcResponse::clear_send_socket_list() {
  send_socket_list_.Clear();
}
inline ::google::protobuf::int32 RpcResponse::send_socket_list(int index) const {
  // @@protoc_insertion_point(field_get:frrpc.RpcResponse.send_socket_list)
  return send_socket_list_.Get(index);
}
inline void RpcResponse::set_send_socket_list(int index, ::google::protobuf::int32 value) {
  send_socket_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:frrpc.RpcResponse.send_socket_list)
}
inline void RpcResponse::add_send_socket_list(::google::protobuf::int32 value) {
  send_socket_list_.Add(value);
  // @@protoc_insertion_point(field_add:frrpc.RpcResponse.send_socket_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RpcResponse::send_socket_list() const {
  // @@protoc_insertion_point(field_list:frrpc.RpcResponse.send_socket_list)
  return send_socket_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RpcResponse::mutable_send_socket_list() {
  // @@protoc_insertion_point(field_mutable_list:frrpc.RpcResponse.send_socket_list)
  return &send_socket_list_;
}

// -------------------------------------------------------------------

// RpcMeta

// string server_name = 1;
inline void RpcMeta::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcMeta::server_name() const {
  // @@protoc_insertion_point(field_get:frrpc.RpcMeta.server_name)
  return server_name_.GetNoArena();
}
inline void RpcMeta::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frrpc.RpcMeta.server_name)
}
#if LANG_CXX11
inline void RpcMeta::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frrpc.RpcMeta.server_name)
}
#endif
inline void RpcMeta::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frrpc.RpcMeta.server_name)
}
inline void RpcMeta::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frrpc.RpcMeta.server_name)
}
inline ::std::string* RpcMeta::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:frrpc.RpcMeta.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcMeta::release_server_name() {
  // @@protoc_insertion_point(field_release:frrpc.RpcMeta.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcMeta::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:frrpc.RpcMeta.server_name)
}

// int32 method_index = 2;
inline void RpcMeta::clear_method_index() {
  method_index_ = 0;
}
inline ::google::protobuf::int32 RpcMeta::method_index() const {
  // @@protoc_insertion_point(field_get:frrpc.RpcMeta.method_index)
  return method_index_;
}
inline void RpcMeta::set_method_index(::google::protobuf::int32 value) {
  
  method_index_ = value;
  // @@protoc_insertion_point(field_set:frrpc.RpcMeta.method_index)
}

// int64 body_size = 3;
inline void RpcMeta::clear_body_size() {
  body_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RpcMeta::body_size() const {
  // @@protoc_insertion_point(field_get:frrpc.RpcMeta.body_size)
  return body_size_;
}
inline void RpcMeta::set_body_size(::google::protobuf::int64 value) {
  
  body_size_ = value;
  // @@protoc_insertion_point(field_set:frrpc.RpcMeta.body_size)
}

// .frrpc.eCompressType compress_type = 4;
inline void RpcMeta::clear_compress_type() {
  compress_type_ = 0;
}
inline ::frrpc::eCompressType RpcMeta::compress_type() const {
  // @@protoc_insertion_point(field_get:frrpc.RpcMeta.compress_type)
  return static_cast< ::frrpc::eCompressType >(compress_type_);
}
inline void RpcMeta::set_compress_type(::frrpc::eCompressType value) {
  
  compress_type_ = value;
  // @@protoc_insertion_point(field_set:frrpc.RpcMeta.compress_type)
}

// bytes authentication_data = 5;
inline void RpcMeta::clear_authentication_data() {
  authentication_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcMeta::authentication_data() const {
  // @@protoc_insertion_point(field_get:frrpc.RpcMeta.authentication_data)
  return authentication_data_.GetNoArena();
}
inline void RpcMeta::set_authentication_data(const ::std::string& value) {
  
  authentication_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:frrpc.RpcMeta.authentication_data)
}
#if LANG_CXX11
inline void RpcMeta::set_authentication_data(::std::string&& value) {
  
  authentication_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:frrpc.RpcMeta.authentication_data)
}
#endif
inline void RpcMeta::set_authentication_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  authentication_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:frrpc.RpcMeta.authentication_data)
}
inline void RpcMeta::set_authentication_data(const void* value, size_t size) {
  
  authentication_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:frrpc.RpcMeta.authentication_data)
}
inline ::std::string* RpcMeta::mutable_authentication_data() {
  
  // @@protoc_insertion_point(field_mutable:frrpc.RpcMeta.authentication_data)
  return authentication_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcMeta::release_authentication_data() {
  // @@protoc_insertion_point(field_release:frrpc.RpcMeta.authentication_data)
  
  return authentication_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcMeta::set_allocated_authentication_data(::std::string* authentication_data) {
  if (authentication_data != NULL) {
    
  } else {
    
  }
  authentication_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authentication_data);
  // @@protoc_insertion_point(field_set_allocated:frrpc.RpcMeta.authentication_data)
}

// .frrpc.RpcRequest rpc_request = 6;
inline bool RpcMeta::has_rpc_request() const {
  return this != internal_default_instance() && rpc_request_ != NULL;
}
inline void RpcMeta::clear_rpc_request() {
  if (GetArenaNoVirtual() == NULL && rpc_request_ != NULL) {
    delete rpc_request_;
  }
  rpc_request_ = NULL;
}
inline const ::frrpc::RpcRequest& RpcMeta::rpc_request() const {
  const ::frrpc::RpcRequest* p = rpc_request_;
  // @@protoc_insertion_point(field_get:frrpc.RpcMeta.rpc_request)
  return p != NULL ? *p : *reinterpret_cast<const ::frrpc::RpcRequest*>(
      &::frrpc::_RpcRequest_default_instance_);
}
inline ::frrpc::RpcRequest* RpcMeta::release_rpc_request() {
  // @@protoc_insertion_point(field_release:frrpc.RpcMeta.rpc_request)
  
  ::frrpc::RpcRequest* temp = rpc_request_;
  rpc_request_ = NULL;
  return temp;
}
inline ::frrpc::RpcRequest* RpcMeta::mutable_rpc_request() {
  
  if (rpc_request_ == NULL) {
    rpc_request_ = new ::frrpc::RpcRequest;
  }
  // @@protoc_insertion_point(field_mutable:frrpc.RpcMeta.rpc_request)
  return rpc_request_;
}
inline void RpcMeta::set_allocated_rpc_request(::frrpc::RpcRequest* rpc_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rpc_request_;
  }
  if (rpc_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rpc_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rpc_request, submessage_arena);
    }
    
  } else {
    
  }
  rpc_request_ = rpc_request;
  // @@protoc_insertion_point(field_set_allocated:frrpc.RpcMeta.rpc_request)
}

// .frrpc.RpcResponse rpc_response = 7;
inline bool RpcMeta::has_rpc_response() const {
  return this != internal_default_instance() && rpc_response_ != NULL;
}
inline void RpcMeta::clear_rpc_response() {
  if (GetArenaNoVirtual() == NULL && rpc_response_ != NULL) {
    delete rpc_response_;
  }
  rpc_response_ = NULL;
}
inline const ::frrpc::RpcResponse& RpcMeta::rpc_response() const {
  const ::frrpc::RpcResponse* p = rpc_response_;
  // @@protoc_insertion_point(field_get:frrpc.RpcMeta.rpc_response)
  return p != NULL ? *p : *reinterpret_cast<const ::frrpc::RpcResponse*>(
      &::frrpc::_RpcResponse_default_instance_);
}
inline ::frrpc::RpcResponse* RpcMeta::release_rpc_response() {
  // @@protoc_insertion_point(field_release:frrpc.RpcMeta.rpc_response)
  
  ::frrpc::RpcResponse* temp = rpc_response_;
  rpc_response_ = NULL;
  return temp;
}
inline ::frrpc::RpcResponse* RpcMeta::mutable_rpc_response() {
  
  if (rpc_response_ == NULL) {
    rpc_response_ = new ::frrpc::RpcResponse;
  }
  // @@protoc_insertion_point(field_mutable:frrpc.RpcMeta.rpc_response)
  return rpc_response_;
}
inline void RpcMeta::set_allocated_rpc_response(::frrpc::RpcResponse* rpc_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rpc_response_;
  }
  if (rpc_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rpc_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rpc_response, submessage_arena);
    }
    
  } else {
    
  }
  rpc_response_ = rpc_response;
  // @@protoc_insertion_point(field_set_allocated:frrpc.RpcMeta.rpc_response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace frrpc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::frrpc::eCompressType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frrpc::eCompressType>() {
  return ::frrpc::eCompressType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_frrpc_2eproto__INCLUDED
