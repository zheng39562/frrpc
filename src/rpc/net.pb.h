// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net.proto

#ifndef PROTOBUF_net_2eproto__INCLUDED
#define PROTOBUF_net_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_net_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsNetInfoImpl();
void InitDefaultsNetInfo();
inline void InitDefaults() {
  InitDefaultsNetInfo();
}
}  // namespace protobuf_net_2eproto
namespace frrpc {
namespace network {
class NetInfo;
class NetInfoDefaultTypeInternal;
extern NetInfoDefaultTypeInternal _NetInfo_default_instance_;
}  // namespace network
}  // namespace frrpc
namespace frrpc {
namespace network {

enum eNetType {
  eNetType_Server = 0,
  eNetType_Gate = 1,
  eNetType_MQ = 2,
  eNetType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  eNetType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool eNetType_IsValid(int value);
const eNetType eNetType_MIN = eNetType_Server;
const eNetType eNetType_MAX = eNetType_MQ;
const int eNetType_ARRAYSIZE = eNetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eNetType_descriptor();
inline const ::std::string& eNetType_Name(eNetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eNetType_descriptor(), value);
}
inline bool eNetType_Parse(
    const ::std::string& name, eNetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eNetType>(
    eNetType_descriptor(), name, value);
}
// ===================================================================

class NetInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:frrpc.network.NetInfo) */ {
 public:
  NetInfo();
  virtual ~NetInfo();

  NetInfo(const NetInfo& from);

  inline NetInfo& operator=(const NetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetInfo(NetInfo&& from) noexcept
    : NetInfo() {
    *this = ::std::move(from);
  }

  inline NetInfo& operator=(NetInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetInfo* internal_default_instance() {
    return reinterpret_cast<const NetInfo*>(
               &_NetInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NetInfo* other);
  friend void swap(NetInfo& a, NetInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  NetInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetInfo& from);
  void MergeFrom(const NetInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 sockets = 1;
  int sockets_size() const;
  void clear_sockets();
  static const int kSocketsFieldNumber = 1;
  ::google::protobuf::uint32 sockets(int index) const;
  void set_sockets(int index, ::google::protobuf::uint32 value);
  void add_sockets(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      sockets() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_sockets();

  // @@protoc_insertion_point(class_scope:frrpc.network.NetInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > sockets_;
  mutable int _sockets_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_net_2eproto::TableStruct;
  friend void ::protobuf_net_2eproto::InitDefaultsNetInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetInfo

// repeated uint32 sockets = 1;
inline int NetInfo::sockets_size() const {
  return sockets_.size();
}
inline void NetInfo::clear_sockets() {
  sockets_.Clear();
}
inline ::google::protobuf::uint32 NetInfo::sockets(int index) const {
  // @@protoc_insertion_point(field_get:frrpc.network.NetInfo.sockets)
  return sockets_.Get(index);
}
inline void NetInfo::set_sockets(int index, ::google::protobuf::uint32 value) {
  sockets_.Set(index, value);
  // @@protoc_insertion_point(field_set:frrpc.network.NetInfo.sockets)
}
inline void NetInfo::add_sockets(::google::protobuf::uint32 value) {
  sockets_.Add(value);
  // @@protoc_insertion_point(field_add:frrpc.network.NetInfo.sockets)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NetInfo::sockets() const {
  // @@protoc_insertion_point(field_list:frrpc.network.NetInfo.sockets)
  return sockets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NetInfo::mutable_sockets() {
  // @@protoc_insertion_point(field_mutable_list:frrpc.network.NetInfo.sockets)
  return &sockets_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace network
}  // namespace frrpc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::frrpc::network::eNetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::frrpc::network::eNetType>() {
  return ::frrpc::network::eNetType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2eproto__INCLUDED
