// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frrpc.proto

#include "frrpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace frrpc {
class RpcRequestMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RpcRequestMeta>
      _instance;
} _RpcRequestMeta_default_instance_;
class RpcResponseMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RpcResponseMeta>
      _instance;
} _RpcResponseMeta_default_instance_;
class RpcMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RpcMeta>
      _instance;
} _RpcMeta_default_instance_;
}  // namespace frrpc
namespace protobuf_frrpc_2eproto {
void InitDefaultsRpcRequestMetaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::frrpc::_RpcRequestMeta_default_instance_;
    new (ptr) ::frrpc::RpcRequestMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frrpc::RpcRequestMeta::InitAsDefaultInstance();
}

void InitDefaultsRpcRequestMeta() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRpcRequestMetaImpl);
}

void InitDefaultsRpcResponseMetaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::frrpc::_RpcResponseMeta_default_instance_;
    new (ptr) ::frrpc::RpcResponseMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frrpc::RpcResponseMeta::InitAsDefaultInstance();
}

void InitDefaultsRpcResponseMeta() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRpcResponseMetaImpl);
}

void InitDefaultsRpcMetaImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_frrpc_2eproto::InitDefaultsRpcRequestMeta();
  protobuf_frrpc_2eproto::InitDefaultsRpcResponseMeta();
  {
    void* ptr = &::frrpc::_RpcMeta_default_instance_;
    new (ptr) ::frrpc::RpcMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::frrpc::RpcMeta::InitAsDefaultInstance();
}

void InitDefaultsRpcMeta() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRpcMetaImpl);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frrpc::RpcRequestMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frrpc::RpcRequestMeta, request_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frrpc::RpcResponseMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frrpc::RpcMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frrpc::RpcMeta, service_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frrpc::RpcMeta, method_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frrpc::RpcMeta, rpc_request_meta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frrpc::RpcMeta, rpc_response_meta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frrpc::RpcMeta, authentication_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::frrpc::RpcMeta, compress_type_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::frrpc::RpcRequestMeta)},
  { 6, -1, sizeof(::frrpc::RpcResponseMeta)},
  { 11, -1, sizeof(::frrpc::RpcMeta)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::frrpc::_RpcRequestMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frrpc::_RpcResponseMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::frrpc::_RpcMeta_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "frrpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013frrpc.proto\022\005frrpc\"$\n\016RpcRequestMeta\022\022"
      "\n\nrequest_id\030\001 \001(\004\"\021\n\017RpcResponseMeta\"\343\001"
      "\n\007RpcMeta\022\024\n\014service_name\030\001 \001(\t\022\024\n\014metho"
      "d_index\030\002 \001(\005\022/\n\020rpc_request_meta\030\003 \001(\0132"
      "\025.frrpc.RpcRequestMeta\0221\n\021rpc_response_m"
      "eta\030\004 \001(\0132\026.frrpc.RpcResponseMeta\022\033\n\023aut"
      "hentication_data\030\005 \001(\014\022+\n\rcompress_type\030"
      "\n \001(\0162\024.frrpc.eCompressType*A\n\reCompress"
      "Type\022\031\n\025eCompressType_Invilad\020\000\022\025\n\021eComp"
      "ressType_Not\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 382);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "frrpc.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_frrpc_2eproto
namespace frrpc {
const ::google::protobuf::EnumDescriptor* eCompressType_descriptor() {
  protobuf_frrpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_frrpc_2eproto::file_level_enum_descriptors[0];
}
bool eCompressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RpcRequestMeta::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcRequestMeta::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcRequestMeta::RpcRequestMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_frrpc_2eproto::InitDefaultsRpcRequestMeta();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:frrpc.RpcRequestMeta)
}
RpcRequestMeta::RpcRequestMeta(const RpcRequestMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:frrpc.RpcRequestMeta)
}

void RpcRequestMeta::SharedCtor() {
  request_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RpcRequestMeta::~RpcRequestMeta() {
  // @@protoc_insertion_point(destructor:frrpc.RpcRequestMeta)
  SharedDtor();
}

void RpcRequestMeta::SharedDtor() {
}

void RpcRequestMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcRequestMeta::descriptor() {
  ::protobuf_frrpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frrpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcRequestMeta& RpcRequestMeta::default_instance() {
  ::protobuf_frrpc_2eproto::InitDefaultsRpcRequestMeta();
  return *internal_default_instance();
}

RpcRequestMeta* RpcRequestMeta::New(::google::protobuf::Arena* arena) const {
  RpcRequestMeta* n = new RpcRequestMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcRequestMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:frrpc.RpcRequestMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool RpcRequestMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frrpc.RpcRequestMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frrpc.RpcRequestMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frrpc.RpcRequestMeta)
  return false;
#undef DO_
}

void RpcRequestMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frrpc.RpcRequestMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_id = 1;
  if (this->request_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:frrpc.RpcRequestMeta)
}

::google::protobuf::uint8* RpcRequestMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frrpc.RpcRequestMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 request_id = 1;
  if (this->request_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frrpc.RpcRequestMeta)
  return target;
}

size_t RpcRequestMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frrpc.RpcRequestMeta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 request_id = 1;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcRequestMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frrpc.RpcRequestMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcRequestMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcRequestMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frrpc.RpcRequestMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frrpc.RpcRequestMeta)
    MergeFrom(*source);
  }
}

void RpcRequestMeta::MergeFrom(const RpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frrpc.RpcRequestMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id() != 0) {
    set_request_id(from.request_id());
  }
}

void RpcRequestMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frrpc.RpcRequestMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcRequestMeta::CopyFrom(const RpcRequestMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frrpc.RpcRequestMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequestMeta::IsInitialized() const {
  return true;
}

void RpcRequestMeta::Swap(RpcRequestMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcRequestMeta::InternalSwap(RpcRequestMeta* other) {
  using std::swap;
  swap(request_id_, other->request_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcRequestMeta::GetMetadata() const {
  protobuf_frrpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frrpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RpcResponseMeta::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcResponseMeta::RpcResponseMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_frrpc_2eproto::InitDefaultsRpcResponseMeta();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:frrpc.RpcResponseMeta)
}
RpcResponseMeta::RpcResponseMeta(const RpcResponseMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:frrpc.RpcResponseMeta)
}

void RpcResponseMeta::SharedCtor() {
  _cached_size_ = 0;
}

RpcResponseMeta::~RpcResponseMeta() {
  // @@protoc_insertion_point(destructor:frrpc.RpcResponseMeta)
  SharedDtor();
}

void RpcResponseMeta::SharedDtor() {
}

void RpcResponseMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcResponseMeta::descriptor() {
  ::protobuf_frrpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frrpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcResponseMeta& RpcResponseMeta::default_instance() {
  ::protobuf_frrpc_2eproto::InitDefaultsRpcResponseMeta();
  return *internal_default_instance();
}

RpcResponseMeta* RpcResponseMeta::New(::google::protobuf::Arena* arena) const {
  RpcResponseMeta* n = new RpcResponseMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcResponseMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:frrpc.RpcResponseMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool RpcResponseMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frrpc.RpcResponseMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:frrpc.RpcResponseMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frrpc.RpcResponseMeta)
  return false;
#undef DO_
}

void RpcResponseMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frrpc.RpcResponseMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:frrpc.RpcResponseMeta)
}

::google::protobuf::uint8* RpcResponseMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frrpc.RpcResponseMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frrpc.RpcResponseMeta)
  return target;
}

size_t RpcResponseMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frrpc.RpcResponseMeta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcResponseMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frrpc.RpcResponseMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcResponseMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcResponseMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frrpc.RpcResponseMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frrpc.RpcResponseMeta)
    MergeFrom(*source);
  }
}

void RpcResponseMeta::MergeFrom(const RpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frrpc.RpcResponseMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RpcResponseMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frrpc.RpcResponseMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcResponseMeta::CopyFrom(const RpcResponseMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frrpc.RpcResponseMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcResponseMeta::IsInitialized() const {
  return true;
}

void RpcResponseMeta::Swap(RpcResponseMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcResponseMeta::InternalSwap(RpcResponseMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcResponseMeta::GetMetadata() const {
  protobuf_frrpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frrpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RpcMeta::InitAsDefaultInstance() {
  ::frrpc::_RpcMeta_default_instance_._instance.get_mutable()->rpc_request_meta_ = const_cast< ::frrpc::RpcRequestMeta*>(
      ::frrpc::RpcRequestMeta::internal_default_instance());
  ::frrpc::_RpcMeta_default_instance_._instance.get_mutable()->rpc_response_meta_ = const_cast< ::frrpc::RpcResponseMeta*>(
      ::frrpc::RpcResponseMeta::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcMeta::kServiceNameFieldNumber;
const int RpcMeta::kMethodIndexFieldNumber;
const int RpcMeta::kRpcRequestMetaFieldNumber;
const int RpcMeta::kRpcResponseMetaFieldNumber;
const int RpcMeta::kAuthenticationDataFieldNumber;
const int RpcMeta::kCompressTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcMeta::RpcMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_frrpc_2eproto::InitDefaultsRpcMeta();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:frrpc.RpcMeta)
}
RpcMeta::RpcMeta(const RpcMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  authentication_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.authentication_data().size() > 0) {
    authentication_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authentication_data_);
  }
  if (from.has_rpc_request_meta()) {
    rpc_request_meta_ = new ::frrpc::RpcRequestMeta(*from.rpc_request_meta_);
  } else {
    rpc_request_meta_ = NULL;
  }
  if (from.has_rpc_response_meta()) {
    rpc_response_meta_ = new ::frrpc::RpcResponseMeta(*from.rpc_response_meta_);
  } else {
    rpc_response_meta_ = NULL;
  }
  ::memcpy(&method_index_, &from.method_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&compress_type_) -
    reinterpret_cast<char*>(&method_index_)) + sizeof(compress_type_));
  // @@protoc_insertion_point(copy_constructor:frrpc.RpcMeta)
}

void RpcMeta::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authentication_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rpc_request_meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compress_type_) -
      reinterpret_cast<char*>(&rpc_request_meta_)) + sizeof(compress_type_));
  _cached_size_ = 0;
}

RpcMeta::~RpcMeta() {
  // @@protoc_insertion_point(destructor:frrpc.RpcMeta)
  SharedDtor();
}

void RpcMeta::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authentication_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rpc_request_meta_;
  if (this != internal_default_instance()) delete rpc_response_meta_;
}

void RpcMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcMeta::descriptor() {
  ::protobuf_frrpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frrpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcMeta& RpcMeta::default_instance() {
  ::protobuf_frrpc_2eproto::InitDefaultsRpcMeta();
  return *internal_default_instance();
}

RpcMeta* RpcMeta::New(::google::protobuf::Arena* arena) const {
  RpcMeta* n = new RpcMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RpcMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:frrpc.RpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authentication_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && rpc_request_meta_ != NULL) {
    delete rpc_request_meta_;
  }
  rpc_request_meta_ = NULL;
  if (GetArenaNoVirtual() == NULL && rpc_response_meta_ != NULL) {
    delete rpc_response_meta_;
  }
  rpc_response_meta_ = NULL;
  ::memset(&method_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compress_type_) -
      reinterpret_cast<char*>(&method_index_)) + sizeof(compress_type_));
  _internal_metadata_.Clear();
}

bool RpcMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:frrpc.RpcMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), static_cast<int>(this->service_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "frrpc.RpcMeta.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 method_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .frrpc.RpcRequestMeta rpc_request_meta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rpc_request_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .frrpc.RpcResponseMeta rpc_response_meta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rpc_response_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes authentication_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_authentication_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .frrpc.eCompressType compress_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_compress_type(static_cast< ::frrpc::eCompressType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:frrpc.RpcMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:frrpc.RpcMeta)
  return false;
#undef DO_
}

void RpcMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:frrpc.RpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "frrpc.RpcMeta.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // int32 method_index = 2;
  if (this->method_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->method_index(), output);
  }

  // .frrpc.RpcRequestMeta rpc_request_meta = 3;
  if (this->has_rpc_request_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rpc_request_meta_, output);
  }

  // .frrpc.RpcResponseMeta rpc_response_meta = 4;
  if (this->has_rpc_response_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->rpc_response_meta_, output);
  }

  // bytes authentication_data = 5;
  if (this->authentication_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->authentication_data(), output);
  }

  // .frrpc.eCompressType compress_type = 10;
  if (this->compress_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->compress_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:frrpc.RpcMeta)
}

::google::protobuf::uint8* RpcMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:frrpc.RpcMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), static_cast<int>(this->service_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "frrpc.RpcMeta.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // int32 method_index = 2;
  if (this->method_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->method_index(), target);
  }

  // .frrpc.RpcRequestMeta rpc_request_meta = 3;
  if (this->has_rpc_request_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->rpc_request_meta_, deterministic, target);
  }

  // .frrpc.RpcResponseMeta rpc_response_meta = 4;
  if (this->has_rpc_response_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->rpc_response_meta_, deterministic, target);
  }

  // bytes authentication_data = 5;
  if (this->authentication_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->authentication_data(), target);
  }

  // .frrpc.eCompressType compress_type = 10;
  if (this->compress_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->compress_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:frrpc.RpcMeta)
  return target;
}

size_t RpcMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:frrpc.RpcMeta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // bytes authentication_data = 5;
  if (this->authentication_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->authentication_data());
  }

  // .frrpc.RpcRequestMeta rpc_request_meta = 3;
  if (this->has_rpc_request_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rpc_request_meta_);
  }

  // .frrpc.RpcResponseMeta rpc_response_meta = 4;
  if (this->has_rpc_response_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rpc_response_meta_);
  }

  // int32 method_index = 2;
  if (this->method_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->method_index());
  }

  // .frrpc.eCompressType compress_type = 10;
  if (this->compress_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->compress_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:frrpc.RpcMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:frrpc.RpcMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:frrpc.RpcMeta)
    MergeFrom(*source);
  }
}

void RpcMeta::MergeFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:frrpc.RpcMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.authentication_data().size() > 0) {

    authentication_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authentication_data_);
  }
  if (from.has_rpc_request_meta()) {
    mutable_rpc_request_meta()->::frrpc::RpcRequestMeta::MergeFrom(from.rpc_request_meta());
  }
  if (from.has_rpc_response_meta()) {
    mutable_rpc_response_meta()->::frrpc::RpcResponseMeta::MergeFrom(from.rpc_response_meta());
  }
  if (from.method_index() != 0) {
    set_method_index(from.method_index());
  }
  if (from.compress_type() != 0) {
    set_compress_type(from.compress_type());
  }
}

void RpcMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:frrpc.RpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMeta::CopyFrom(const RpcMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:frrpc.RpcMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMeta::IsInitialized() const {
  return true;
}

void RpcMeta::Swap(RpcMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcMeta::InternalSwap(RpcMeta* other) {
  using std::swap;
  service_name_.Swap(&other->service_name_);
  authentication_data_.Swap(&other->authentication_data_);
  swap(rpc_request_meta_, other->rpc_request_meta_);
  swap(rpc_response_meta_, other->rpc_response_meta_);
  swap(method_index_, other->method_index_);
  swap(compress_type_, other->compress_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RpcMeta::GetMetadata() const {
  protobuf_frrpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_frrpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace frrpc

// @@protoc_insertion_point(global_scope)
