----------------------------------------------------------------------------------------------------------
### TODO:
	* Channel的Register 和 Request map调整:
		* 增加disaptch线程.
			* 找到对应的closure后，传输给对应的work thread.
			* 保证同一个Register的消息，同时只有一个线程在处理(即在处理就先放放).
			* 核心保证消息时序处理，但可以跳过处理(当这个消息不能现在处理的情况下).
			* Request: 找到对应request 然后提取传输到word thread，删除(此操作在dispatch内进行.)
			* Register:
				* CURD 上加锁
				* 增加reference count.避免删除时，还有work thread在使用.ref_count = 0 时在删除(release函数中实现, 增加reference函数)
		* RunCallback 放回到函数内部进行实现.
			* 当初放在外部目标是，希望可以所有逻辑作成单线程.但思考了一下，只需要增加一个定时器，实际上就可以在内部做到。
			  内部runcb thread 在管理上有太多的优越性.
			  且定时器应该是标配，所以这样考虑了一下，还是决定移进内部.

	* 增加定时器功能
		* 独立功能，可以应用在Channel和Server上.
		* 还没考虑好放哪里.
		* channel 的req超时考虑放这里.

	* 零散的需求记录:
		* server 和 route 考虑增加每个req-rsp 和 push请求的记录(量可能比较大，不过可以考虑加上去 然后定期删除.).
			* 必要但不急.
		* RpcNetServer的Disconnect 还没实现.
		* 同步机制增加: 必要但不急.
		* 实现control对单次请求的控制功能：例如取消等待(异步时，取消回调)和超时等
		* channel RunCallback 放到内部做成单线程。此点需要更具体去考虑。但个人感觉是可以的.

----------------------------------------------------------------------------------------------------------
### 其他项目对此项目的影响(排列顺序是修改顺序)
	* frnet 的stop问题.
		* 同线程递归调用到join。具体见frnet，会直接影响rpc OnReceive 中不能进行Stop操作.
	* log 变成json格式.
	* client heart 需不需要加超时时间?
		* 现在channel端都没有client的心跳超时检查. 但send失败时会报错.(仅报错，也不会跳出循环.)
	* 压力测试，不看性能，主要是看一下压力情况是否会出现bug
		* gprof(GNU 性能测试工具), valgrind
		* 记得增加-O2的优化编译选项.
	* log 里有unknow级别的log。找找问题在哪里.

----------------------------------------------------------------------------------------------------------
### 整理代码产生的疑惑和需求
	* 多线程可能出现的操作问题(记录可能出现问题的变量).
		* Channel RunCallback 多线程调用，内部会不会有冲突?

----------------------------------------------------------------------------------------------------------
### 暂时不做，但怕忘记的备忘.
	* 同步channel机制未实现.
	* 根据一个key保持处理时序.
		* 支持linkid，但更倾向是一个自定义的key。这样更符合要求.
		* 避免一定程度的多线程问题。
		* 此功能存疑还在考虑中.

----------------------------------------------------------------------------------------------------------
### 需要做的测试(进度做完后):

----------------------------------------------------------------------------------------------------------
### 灵思.




